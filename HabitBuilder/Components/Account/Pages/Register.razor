@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using HabitBuilder.Components.Account.Shared
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register - EasyBriezy</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<h3>Register</h3>

<EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-body bg-light">
            <h4 class="card-title">Register</h4>

            <div class="row g-3">
                <!-- About You Section -->
                <div class="col-md-6">
                    <div class="form-group mb-2">
                        <label for="firstname" class="form-label">First Name</label>
                        <InputText id="firstname" class="form-control" placeholder="First Name" @bind-Value="Model.FirstName" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.FirstName)" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-2">
                        <label for="lastname" class="form-label">Last Name</label>
                        <InputText id="lastname" class="form-control" placeholder="Last Name" @bind-Value="Model.LastName" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.LastName)" />
                        </div>
                    </div>
                </div>

                <!-- Login Details Section -->
                <div class="col-md-12">
                    <div class="form-group mb-2">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" placeholder="you@example.com" @bind-Value="Model.Email" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-2">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.Password)" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-2">
                        <label for="confirm-password" class="form-label">Confirm Password</label>
                        <InputText id="confirm-password" type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="col-md-12 mt-3">
                    <button type="submit" class="btn btn-primary w-100">Register</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        // create the user
        var user = new User
            {
                UserName = Model.Email,
                Email = Model.Email,
                FirstName = Model.FirstName,
                LastName = Model.LastName,
            };

        // add to the database
        var result = await UserManager.CreateAsync(user, Model.Password);

        // report the errors
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        // assign the role
        await UserManager.AddToRoleAsync(user, "Customer");

        // log the user in
        var userId = await UserManager.GetUserIdAsync(user);
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Please enter your first name.")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Please enter your last name.")]
        public string LastName { get; set; } = "";

    }
}