﻿@using System.ComponentModel.DataAnnotations
@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor

@inject UserProvider UserProvider // User data and actions.
@inject HabitOrderProvider HabitOrderProvider // Habit order handling.
@inject HabitProvider HabitProvider // Habit data handling.
@inject AuthenticationStateProvider AuthenticationStateProvider // Authentication state management.
@inject NavigationManager NavigationManager // Navigation control.
@inject ISnackbar Snackbar



<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-9">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Habit Order</h4>


                    <!-- Date Picker -->
                    <div class="row g-3">
                        <div class="col-md-12">
                            <MudDatePicker Label="Select Date"
                                           @bind-Date="_selectedDate"
                                           MaxDate="DateTime.Today"
                                           ShowToolbar="false" />
                        </div>
                    </div>

                    <!-- Habit order form -->
                    <EditForm OnValidSubmit="Submit" Model="new object()" FormName="HabitOrderForm">
                        <DataAnnotationsValidator /> <!-- Validation support -->
                        <!-- Habit Checkboxes -->

                        <div class="row g-3">
                            <div class="col-md-12">
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" @bind-Value="None" />
                                    <label class="form-check-label">None</label>
                                </div>
                                @if (!None)
                                {
                                    @foreach (Habit habit in Habits)
                                    {
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input" @bind-Value="habit.IsChecked" id="@($"habit_{habit.Id}")" />
                                            <label class="form-check-label" for="@($"habit_{habit.Id}")">@habit.Name</label>
                                        </div>
                                    }
                                }
                            </div>
                        </div>


                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IQueryable<Habit> Habits { get; set; } // List of habits.
    private User user; // Authenticated user.
    private bool None;

    [Required(ErrorMessage = "Please select a valid date")]
    private DateTime? _selectedDate = DateTime.Today; // Default to today.

    protected override async Task OnInitializedAsync()
    {
        // Load user and habits.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        user = UserProvider.GetUserByUsername(username);
        Habits = (await HabitProvider.GetAllHabitsAsync()).AsQueryable();
    }

    private async Task Submit()
    {
        if (_selectedDate == null)
        {
            Snackbar.Add("Please select a valid date.", Severity.Warning);
            return;
        }

        // Convert _selectedDate to DateOnly for consistency
        var selectedDateOnly = DateOnly.FromDateTime(_selectedDate.Value.Date);

        // Check if an order already exists for the selected date
        var existingOrder = (await HabitOrderProvider.GetAllOrdersAsync(user))
            ?.FirstOrDefault(order => order.Day == selectedDateOnly);


        // Get selected habits
        var selectedHabits = Habits.Where(h => h.IsChecked).ToList();

        if (existingOrder != null)
        {
            Snackbar.Add("A log already exists for this date. Please edit the existing log.", Severity.Warning);
            return;
        }

        // Create the new habit order with the selected date
        else if (None)
        {
            // Create the new habit order with 0 points if "None" is selected
            await HabitOrderProvider.CreateOrder(user,
                new List<HabitOrderItem>(), // No habits selected
                selectedDateOnly,
                0); // Total points set to 0
            Snackbar.Add("Log added successfully.", Severity.Success);
        }
        else
        {
            // Create the new habit order with selected habits and calculated points
            await HabitOrderProvider.CreateOrder(user,
                selectedHabits.Select(h => new HabitOrderItem { Habit = h }).ToList(),
                selectedDateOnly,
                selectedHabits.Sum(h => h.Point)); // Sum of points from selected habits
            Snackbar.Add("Log added successfully.", Severity.Success);
        }


        StateHasChanged(); // Notify state change
        NavigationManager.NavigateTo("/", true); // Redirect after submission
    }

}