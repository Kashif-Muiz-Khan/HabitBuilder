@using System.ComponentModel.DataAnnotations
@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms

@inject UserProvider UserProvider // User data and actions.
@inject HabitOrderProvider HabitOrderProvider // Habit order handling.
@inject HabitProvider HabitProvider // Habit data handling.
@inject AuthenticationStateProvider AuthenticationStateProvider // Authentication state management.
@inject NavigationManager NavigationManager // Navigation control.

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-9">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Habit Order</h4>
                    <!-- Habit order form -->
                    <EditForm OnValidSubmit="Submit" Model="new object()" FormName="HabitOrderForm">
                        <DataAnnotationsValidator /> <!-- Validation support -->

                        <div class="row g-3">
                            <div class="col-md-12">
                                <!-- Habit checkboxes -->
                                @foreach (Habit habit in Habits)
                                {
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" @bind-Value="habit.IsChecked" id="@($"habit_{habit.Id}")" />
                                        <label class="form-check-label" for="@($"habit_{habit.Id}")">@habit.Name</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Submit button -->
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IQueryable<Habit> Habits { get; set; } // List of habits.
    private User user; // Authenticated user.

    protected override async Task OnInitializedAsync()
    {
        // Load user and habits.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name; 
        user = UserProvider.GetUserByUsername(username); 
        Habits = (await HabitProvider.GetAllHabitsAsync()).AsQueryable();
    }

    private async Task Submit()
    {
        // Process selected habits.
        var selectedHabits = Habits.Where(h => h.IsChecked).ToList();
        await HabitOrderProvider.CreateOrder(user, selectedHabits.Select(h => new HabitOrderItem { Habit = h }).ToList());

        StateHasChanged(); // Notify state change.
        NavigationManager.NavigateTo("/", true); // Redirect after submission.
    }
}
