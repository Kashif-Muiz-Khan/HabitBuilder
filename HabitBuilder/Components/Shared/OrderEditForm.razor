﻿@using System.ComponentModel.DataAnnotations
@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor

@inject HabitOrderProvider HabitOrderProvider 
@inject HabitProvider HabitProvider 
@inject ISnackbar Snackbar 
@inject NavigationManager NavigationManager 
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider


@if (_selectedOrder != null)
{
    <EditForm OnValidSubmit="SaveChanges" EditContext="@editContext">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-12">

                <MudDatePicker Label="Select Date"
                               Value="@_selectedDate"
                               ValueChanged="OnDateChanged"
                               MaxDate="DateTime.Today"
                               ShowToolbar="false" />


            </div>
        </div>

        <div class="row g-3">
            <div class="col-md-12">
                <h5>Edit Log for: @(_selectedOrder.Day.ToString("MMMM dd, yyyy"))</h5>
                <div class="form-check">
                    <MudCheckBox T="bool" Label="None" @bind-Checked="None" @onchange="OnNoneSelectedChange" />
                </div>
                @if (!None)
                {
                    @foreach (var habit in Habits)
                    {
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="habit.IsChecked" />
                            <label class="form-check-label">@habit.Name</label>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success">Save Changes</button>
        </div>
    </EditForm>
}
else
{
    <p>Select a day to edit the log.</p>
}

@code {
    [Parameter]
    public EventCallback<HabitOrder> OnOrderUpdated { get; set; }

    private HabitOrder? _selectedOrder;
    private EditContext editContext = new EditContext(new HabitOrder());
    private IQueryable<Habit> Habits { get; set; } = Enumerable.Empty<Habit>().AsQueryable();
    private bool None;
    [Required(ErrorMessage = "Please select a valid date")]
    private DateTime? _selectedDate = DateTime.Today;

    private User user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = UserProvider.GetUserByUsername(authState.User.Identity.Name);
    }



    public async Task LoadOrder(DateOnly date, User user)
    {
        if (_selectedDate == null)
        {
            Snackbar.Add("Please select a valid date.", Severity.Warning);
            return;
        }

        var order = await HabitOrderProvider.GetOrderByDateAsync(user, date);
        if (order != null)
        {
            _selectedOrder = order;

            foreach (var habit in Habits)
            {
                habit.IsChecked = _selectedOrder.Items.Any(item => item.Habit.Id == habit.Id);
            }

            None = !_selectedOrder.Items.Any();
            editContext = new EditContext(_selectedOrder);
        }
        else
        {
            Snackbar.Add("No log found for the selected date.", Severity.Warning);
            _selectedOrder = null;
        }

        StateHasChanged();
    }


    private void OnNoneSelectedChange(ChangeEventArgs e)
    {
        if (None)
        {
            foreach (var habit in Habits)
            {
                habit.IsChecked = false;
            }
        }
    }

    private async Task SaveChanges()
    {
        if (_selectedOrder == null)
        {
            Snackbar.Add("No log selected for editing.", Severity.Error);
            return;
        }

        var selectedHabits = Habits.Where(h => h.IsChecked).ToList();
        _selectedOrder.Items = selectedHabits.Select(h => new HabitOrderItem { Habit = h }).ToList();
        _selectedOrder.TotalPoints = selectedHabits.Sum(h => h.Point);

        await HabitOrderProvider.UpdateOrderAsync(_selectedOrder);

        Snackbar.Add("Log updated successfully.", Severity.Success);
        await OnOrderUpdated.InvokeAsync(_selectedOrder);
        NavigationManager.NavigateTo("/", true);
    }
}

