@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject HabitProvider HabitProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider

<!-- Habit Form -->
<div class="card">
    <div class="card-body bg-light">
        <h4 class="card-title">
            @(model.Id == 0 ? "Add Habit" : "Edit Habit")
        </h4>
        <EditForm OnValidSubmit="Submit" EditContext="editContext">
            <DataAnnotationsValidator />

            <!-- Habit Form allowing the user to input required Habit Details -->
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText class="form-control" placeholder="Name" @bind-Value="model.Name" />
                    <ValidationMessage For="@(() => model.Name)" />
                </div>
                <div class="col-md-3">
                    <label for="type" class="form-label">Type</label>
                    <InputText class="form-control" placeholder="Type" @bind-Value="model.Type" />
                    <ValidationMessage For="@(() => model.Type)" />
                </div>
                <div class="col-md-3">
                    <label for="description" class="form-label">Description</label>
                    <InputText class="form-control" placeholder="Description" @bind-Value="model.Description" />
                    <ValidationMessage For="@(() => model.Description)" />
                </div>
                <div class="col-md-3">
                    <label for="frequency" class="form-label">Frequency</label>
                    <InputSelect class="form-control" @bind-Value="model.Frequency">
                        @foreach (var frequency in Enum.GetValues(typeof(FrequencyLevel)))
                        {
                            <option value="@frequency">@frequency</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => model.Frequency)" />
                </div>
                <div class="col-md-3">
                    <label for="target" class="form-label">Target</label>
                    <InputNumber class="form-control" placeholder="Target (e.g., 3 times)" @bind-Value="model.Target" />
                    <ValidationMessage For="@(() => model.Target)" />
                </div>
                <div class="col-md-3">
                    <label for="difficulty" class="form-label">Difficulty</label>
                    <InputSelect class="form-control" @bind-Value="model.Difficulty">
                        @foreach (var difficulty in Enum.GetValues(typeof(DifficultyLevel)))
                        {
                            <option value="@difficulty">@difficulty</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => model.Difficulty)" />
                </div>
                <div class="col-md-12">
                    <button type="submit" class="btn btn-primary float-end">@(model.Id == 0 ? "Add Habit" : "Save Changes")</button>
                </div>
            </div>
            <div class=" col-md-12">
                <div class="card">
                    <p>The Difficulty Levels award point in the following manner</p>
                    <ul>
                        <li>Very Easy - 2 points</li>
                        <li>Easy - 5 points</li>
                        <li>Medium - 8 points</li>
                        <li>Hard - 12 points</li>
                        <li>Very Hard - 16 points</li>
                        <li>Impossible - 25 points</li>
                    </ul>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<bool> OnSaved { get; set; }

    [Parameter]
    public Habit Model
    {
        get
        {
            return model;
        }
        set
        {
            model = value ?? new Habit();
            editContext = new(model);
        }
    }
    private Habit model;
    private EditContext editContext;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        // Load user and habits.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        user = UserProvider.GetUserByUsername(username);
    }

    private async Task Submit()
    {
        model.User = user;

        if (Model.Id == 0)
            await HabitProvider.AddHabitAsync(Model);
        else
            await HabitProvider.UpdateHabitAsync(Model);

        await OnSaved.InvokeAsync();
        NavigationManager.NavigateTo("/habit", true);
    }
}
