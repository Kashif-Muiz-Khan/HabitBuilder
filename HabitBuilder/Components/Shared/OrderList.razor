@rendermode InteractiveServer
@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HabitOrderProvider HabitOrderProvider
@inject NavigationManager NavigationManager







@if (Orders == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <QuickGrid Theme="order" Class="table" Items="@Orders" Pagination="@pagination">
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Day)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TotalPoints)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Items.Count)" Sortable="true" />
            <TemplateColumn Title="Delete">
                <button class="btn btn-danger" @onclick="() => Delete(context)">Delete</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
}

@code {



    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string nameSearch;


    public IQueryable<HabitOrder>? Orders { get; set; }
    private User user;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
        Orders = HabitOrderProvider.GetAllOrders(user);
    }






    private async void Edit(HabitOrder order)
    {
        await HabitOrderProvider.UpdateOrderAsync(order);
    }


    private async Task Delete(HabitOrder order)
    {
        await HabitOrderProvider.DeleteOrder(order);
        StateHasChanged();
        NavigationManager.NavigateTo("/order", true);
    }
} 