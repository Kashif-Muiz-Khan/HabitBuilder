@rendermode InteractiveServer
@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@inject HabitProvider HabitProvider
@inject NavigationManager NavigationManager



@if (Habits == null)
{
    <p>Loading...</p>
}
else
{

    <div>
        <!-- Filters -->
        <div class="filters" style="background-color: rgba(66,66,66,255); color:white">
            <div class="filter-frequency">
                <label for="frequency-filter">Filter by Frequency:</label>
                <select id="frequency-filter" @bind="frequencyFilter">
                    <option value="">All</option>
                    @foreach (var frequency in Enum.GetValues(typeof(FrequencyLevel)))
                    {
                        <option value="@frequency">@frequency</option>
                    }
                </select>
            </div>
            <div class="search-box">
                <input type="search" placeholder="Search by habit name..." @bind="nameSearch" @bind:event="oninput" />
            </div>
        </div>


        <style>
            /* Styles for the QuickGrid */
            .quickgrid-container {
                background-color: rgba(66, 66, 66, 255); /* Grid background color */
                color: white; /* Default text color */
                border-radius: 8px; /* Rounded edges for the grid */
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
                padding: 10px; /* Padding inside the grid container */
            }

                .quickgrid-container th {
                    background-color: purple; /* Header background */
                    color: white; /* Header text color */
                    text-align: center; /* Center align headers */
                    padding: 8px; /* Header cell padding */
                    font-size: 14px; /* Header font size */
                }

                .quickgrid-container td {
                    padding: 10px; /* Cell padding */
                    border-bottom: 1px solid rgba(255, 255, 255, 0.1); /* Light divider */
                    text-align: left; /* Left align content */
                }

                .quickgrid-container tr:hover {
                    background-color: rgba(80, 80, 80, 1); /* Highlight rows on hover */
                }

                .quickgrid-container .btn {
                    font-size: 14px; /* Button font size */
                    padding: 5px 10px; /* Button padding */
                }

                /* Button styles */
                .quickgrid-container .btn-success {
                    background-color: #28a745; /* Green */
                    border: none;
                }

                .quickgrid-container .btn-danger {
                    background-color: #dc3545; /* Red */
                    border: none;
                }

                .quickgrid-container .btn-primary {
                    background-color: #007bff; /* Blue */
                    border: none;
                }

                /* Pagination styles */
                .quickgrid-container .pagination {
                    background-color: rgba(66, 66, 66, 255);
                    color: white;
                    border: none;
                }

            /* Filters container styles */
            .filters {
                background-color: rgba(66, 66, 66, 255);
                color: white;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                margin-bottom: 15px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            /* Individual filter section styles */
            .filter-frequency {
                display: flex;
                flex-direction: column;
            }

                .filter-frequency label {
                    font-size: 14px;
                    margin-bottom: 5px;
                }

            #frequency-filter {
                background-color: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid rgba(255, 255, 255, 0.2);
                padding: 5px 10px;
                border-radius: 4px;
                outline: none;
            }

                #frequency-filter option {
                    background-color: rgba(66, 66, 66, 255);
                    color: white;
                }

            /* Search box styles */
            .search-box input[type="search"] {
                background-color: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid rgba(255, 255, 255, 0.2);
                padding: 5px 10px;
                border-radius: 4px;
                outline: none;
                width: 250px;
            }

                .search-box input[type="search"]::placeholder {
                    color: rgba(255, 255, 255, 0.6);
                }
        </style>


        <!-- Habit QuickGrid -->
        <div style="background-color: rgba(66,66,66,255); color: white;">
        <QuickGrid Theme="habit" Class="quickgrid-container" Items="@FilteredHabit" Pagination="@pagination">
            <!-- The columns in which the data will be displayed -->
            <PropertyColumn Property="@(p => p.Id)" Title="ID" Sortable="true" />
            <PropertyColumn Property="@(p => p.Name)" Title="Habit Name" Sortable="true" />
            <PropertyColumn Property="@(p => p.Type)" Title="Type" Sortable="true" />
            <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
            <PropertyColumn Property="@(p => p.Difficulty)" Title="Difficulty" Sortable="true" />
            <PropertyColumn Property="@(p => p.Point)" Title="Points" Sortable="true" />
            <PropertyColumn Property="@(p => p.Frequency)" Title="Frequency" Sortable="true" />
            <PropertyColumn Property="@(p => p.Target)" Title="Target" Sortable="true" />
            <TemplateColumn Title="Edit">

            <!-- Buttons that allow the user to edit, delete or see more info about each habit -->
                <button class="btn btn-success" @onclick="() => Edit(context)">Edit</button>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn btn-danger" @onclick="() => Delete(context)">Delete</button>
            </TemplateColumn>
            <TemplateColumn Title="Info">
                <button class="btn btn-primary" @onclick="() => ShowInfo(context)">Info</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination"/>
    </div>
    </div>
}

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string nameSearch;
    private FrequencyLevel? frequencyFilter;

    [Parameter]
    public EventCallback<Habit> OnEditClicked { get; set; }

    [Parameter]
    public EventCallback<Habit> OnDeleteClicked { get; set; }

    [Parameter]
    public IQueryable<Habit>? Habits { get; set; }

    private IQueryable<Habit>? FilteredHabit
    {
        get
        {
            IQueryable<Habit>? filtered = Habits;

            // Filter by name
            if (!string.IsNullOrEmpty(nameSearch))
            {
                filtered = filtered?.Where(habit => habit.Name.Contains(nameSearch, StringComparison.CurrentCultureIgnoreCase));
            }

            // Filter by frequency
            if (frequencyFilter.HasValue)
            {
                filtered = filtered?.Where(habit => habit.Frequency == frequencyFilter.Value);
            }

            return filtered;
        }
    }

    public void ShowInfo(Habit habit)
    {
        NavigationManager.NavigateTo($"/Info/{habit.Id}");
    }

    private void Edit(Habit habit)
    {
        OnEditClicked.InvokeAsync(habit);
    }

    private async void Delete(Habit habit)
    {
        await HabitProvider.DeleteHabitAsync(habit);
        StateHasChanged();
        NavigationManager.NavigateTo("/habit", true);
    }
}
