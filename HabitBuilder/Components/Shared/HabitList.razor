@rendermode InteractiveServer
@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@inject HabitProvider HabitProvider
@inject NavigationManager NavigationManager

<h3>Habit QuickGrid</h3>

@if (Habits == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <!-- Filters -->
        <div class="filters">
            <div class="filter-frequency">
                <label for="frequency-filter">Filter by Frequency:</label>
                <select id="frequency-filter" @bind="frequencyFilter">
                    <option value="">All</option>
                    @foreach (var frequency in Enum.GetValues(typeof(FrequencyLevel)))
                    {
                        <option value="@frequency">@frequency</option>
                    }
                </select>
            </div>
            <div class="search-box">
                <input type="search" placeholder="Search by habit name..." @bind="nameSearch" @bind:event="oninput" />
            </div>
        </div>

        <!-- Habit QuickGrid -->
        <QuickGrid Theme="habit" Class="table" Items="@FilteredHabit" Pagination="@pagination">
            <!-- The columns in which the data will be displayed -->
            <PropertyColumn Property="@(p => p.Id)" Title="ID" Sortable="true" />
            <PropertyColumn Property="@(p => p.Name)" Title="Habit Name" Sortable="true" />
            <PropertyColumn Property="@(p => p.Type)" Title="Type" Sortable="true" />
            <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
            <PropertyColumn Property="@(p => p.Difficulty)" Title="Difficulty" Sortable="true" />
            <PropertyColumn Property="@(p => p.Point)" Title="Points" Sortable="true" />
            <PropertyColumn Property="@(p => p.Frequency)" Title="Frequency" Sortable="true" />
            <PropertyColumn Property="@(p => p.Target)" Title="Target" Sortable="true" />
            <TemplateColumn Title="Edit">

            <!-- Buttons that allow the user to edit, delete or see more info about each habit -->
                <button class="btn btn-success" @onclick="() => Edit(context)">Edit</button>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn btn-danger" @onclick="() => Delete(context)">Delete</button>
            </TemplateColumn>
            <TemplateColumn Title="Info">
                <button class="btn btn-primary" @onclick="() => ShowInfo(context)">Info</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
}

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string nameSearch;
    private FrequencyLevel? frequencyFilter;

    [Parameter]
    public EventCallback<Habit> OnEditClicked { get; set; }

    [Parameter]
    public EventCallback<Habit> OnDeleteClicked { get; set; }

    [Parameter]
    public IQueryable<Habit>? Habits { get; set; }

    private IQueryable<Habit>? FilteredHabit
    {
        get
        {
            IQueryable<Habit>? filtered = Habits;

            // Filter by name
            if (!string.IsNullOrEmpty(nameSearch))
            {
                filtered = filtered?.Where(habit => habit.Name.Contains(nameSearch, StringComparison.CurrentCultureIgnoreCase));
            }

            // Filter by frequency
            if (frequencyFilter.HasValue)
            {
                filtered = filtered?.Where(habit => habit.Frequency == frequencyFilter.Value);
            }

            return filtered;
        }
    }

    public void ShowInfo(Habit habit)
    {
        NavigationManager.NavigateTo($"/Info/{habit.Id}");
    }

    private void Edit(Habit habit)
    {
        OnEditClicked.InvokeAsync(habit);
    }

    private async void Delete(Habit habit)
    {
        await HabitProvider.DeleteHabitAsync(habit);
        StateHasChanged();
        NavigationManager.NavigateTo("/habit", true);
    }
}
