@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject QuoteProvider QuoteProvider
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider


<div>
    <div class="row g-0">
        <div class="col-md-12">
            <button class="btn btn-primary float-end" style="color: black; background-color:gold; border:none" @onclick="ShowAddQuote">
                Add Quote
            </button>
        </div>
    </div>

    @if (showForm)
    {
        // Conditional check to render the form only if 'showForm' is true
        <div class="card" style="background-color: rgba(66,66,66,255); color:white; border: none;">
            <div class="card-body">
                <!-- Dynamically set the title based on whether adding or editing a quote -->
                <h4 class="card-title align-left" style="color:white;">
                    @(model.Id == 0 ? "Add Quote" : "Edit Quote")
                </h4>

                <!-- Form for adding/editing quotes with validation -->
                <EditForm OnValidSubmit="Submit" EditContext="editContext">
                    <!-- Enables validation based on data annotations -->
                    <DataAnnotationsValidator />

                    <div class="row g-3">
                        <!-- Input field for the quote text -->
                        <div class="col-md-6">
                            <label for="quoteText" class="form-label">Quote Text</label>
                            <InputText class="form-control"
                                       style="background-color: rgba(26,26,39,1); color: white;"
                                       placeholder="Enter the quote"
                                       @bind-Value="model.QuoteText" />
                            <!-- Displays validation messages for the QuoteText field -->
                            <ValidationMessage For="@(() => model.QuoteText)" />
                        </div>

                        <!-- Input field for the author's name -->
                        <div class="col-md-6">
                            <label for="author" class="form-label">Author</label>
                            <InputText class="form-control"
                                       style="background-color: rgba(26,26,39,1); color: white;"
                                       placeholder="Enter the author's name"
                                       @bind-Value="model.Author" />
                            <!-- Displays validation messages for the Author field -->
                            <ValidationMessage For="@(() => model.Author)" />
                        </div>

                        <!-- Submit button for the form -->
                        <div class="col-md-12">
                            <button type="submit"
                                    class="btn btn-primary float-end"
                                    style="color: black; background-color:gold; border:none;">
                                <!-- Dynamically sets button text based on add/edit mode -->
                                @(model.Id == 0 ? "Add Quote" : "Save Changes")
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    </div>

<br/>
<br/>
<br />



@* <div class="container">
    <div class="row">
        @foreach (var quote in quotes.Select((value, index) => new { value, index }))
        {
            <div class="col-md-4 mb-4 d-flex">
                <div class="card flex-fill">
                    <div class="card-body">
                        <h5 class="card-title">"@quote.value.QuoteText"</h5>
                        <h6 class="card-text">@quote.value.Author</h6>
                        <!-- Favorite button -->
                        <MudIconButton Icon="@GetFavoriteIcon(quote.value.Id)"
                                       Color="Color.Secondary"
                                       aria-label="add to favorite"
                                       OnClick="@(() => ToggleFavorite(quote.value.Id))" />
                    </div>
                </div>
            </div>
            @if ((quote.index + 1) % 3 == 0)
            {
                <div class="row"></div>
            }
        }
    </div>
</div> *@


<style>
    body {
        background: #1D1F20;
        color: white;
        font-family: Arial, sans-serif;
    }

    .card.custom-card {
        background-color: rgba(26, 26, 39, 1);
        color: white;
        border: 1px solid #f1c40f;
        border-radius: 10px;
        box-shadow: 2px 2px 15px rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%; /* Ensures all cards stretch to the same height */
        padding: 20px;
        position: relative;
    }

    .row {
        display: flex;
        flex-wrap: wrap; /* Ensures wrapping for multiple rows */
    }

    .col-md-4 {
        display: flex;
        flex-direction: column;
    }

    .quote-container {
        flex-grow: 1; /* Ensures the quote container takes up remaining space */
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 20px;
    }

    .opening-quote,
    .closing-quote {
        font-size: 50px;
        color: #f1c40f;
        font-family: "Times New Roman", Georgia, Serif;
    }

    .opening-quote {
        position: absolute;
        top: 0;
        left: 10px;
    }

    .closing-quote {
        position: absolute;
        bottom: 0;
        right: 10px;
    }

    .quote-text {
        font-style: italic;
        font-size: 16px;
        color: white;
        text-align: center;
        line-height: 1.5;
        padding: 10px 40px;
        margin: 0;
        position: relative;
    }

    .card-title {
        color: #f1c40f;
        font-weight: bold;
        font-size: 18px;
        text-align: center;
        margin-top: 10px;
    }

    .actions {
        text-align: center;
        margin-top: 10px;
    }

        .actions .MudIconButton {
            margin-top: 5px;
        }

</style>




<div class="container">
    <div class="row">
        @foreach (var quote in quotes.Select((value, index) => new { value, index }))
        {
            <div class="col-md-4 mb-4">
                <div class="card custom-card">
                    <div class="quote-container">
                        <div class="opening-quote">&ldquo;</div>
                        <div class="quote-text">@quote.value.QuoteText</div>
                        <div class="closing-quote">&rdquo;</div>
                    </div>
                    <h5 class="card-title">@quote.value.Author</h5>
                    <div class="actions">
                        <!-- Favorite Button -->
                        <MudIconButton Icon="@GetFavoriteIcon(quote.value.Id)"
                                       Color="Color.Secondary"
                                       aria-label="add to favorite"
                                       OnClick="@(() => ToggleFavorite(quote.value.Id))" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>







<style>
    /* Table container styling */
.table {
    width: 100%;
    margin-bottom: 1rem;
    color: #ffffff; /* Text color */
    background-color: rgba(66, 66, 66, 255); /* Table background */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Shadow for depth */
    border-collapse: collapse; /* Removes extra borders between cells */
    overflow: hidden;
}

/* Header styling */
.table thead th {
    background-color: purple; /* Header background */
    color: white; /* Header text color */
    text-align: center;
    font-size: 14px; /* Font size for header */
    padding: 12px; /* Padding inside header cells */
}

/* Body cell styling */
.table tbody td {
    padding: 12px; /* Cell padding */
    border-bottom: 1px solid rgba(255, 255, 255, 0.1); /* Light divider */
    text-align: left; /* Align content to the left */
    background-color: rgba(66,66,66,255);
    color: white;
            
}

/* Hover effect for rows */
.table tbody tr:hover {
    background-color: rgba(80, 80, 80, 1); /* Highlight row on hover */
}

/* Button styles */
.table .btn {
    font-size: 14px; /* Button font size */
    padding: 5px 10px; /* Padding for buttons */
    border-radius: 4px; /* Rounded edges for buttons */
}

/* Success button style */
.table .btn-success {
    background-color: #28a745; /* Green */
    border: none; /* Remove border */
}

/* Danger button style */
.table .btn-danger {
    background-color: #dc3545; /* Red */
    border: none; /* Remove border */
}



}


</style>



    <div>
        <!-- Row to house the "Show Quote List" button -->
        <div class="row g-0">
            <div class="col-md-12">
                <!-- Button to toggle the visibility of the quote list -->
                <button class="btn btn-primary float-end" @onclick="ShowQuoteList">
                    Show Quote List
                </button>
            </div>
        </div>

        <!-- Conditional rendering: Display the quote list if 'showList' is true -->
        @if (showList)
        {
            <!-- Table to display the list of quotes -->
            <table class="table">
                <thead>
                    <tr>
                        <!-- Header row defining the table columns -->
                        <th scope="col">#</th>
                        <th scope="col">Quote Text</th>
                        <th scope="col">Author</th>
                        <th></th> <!-- Placeholder for Edit action -->
                        <th></th> <!-- Placeholder for Delete action -->
                    </tr>
                </thead>
                <tbody>
                    <!-- Loop through the list of quotes and display each as a table row -->
                    @foreach (var quote in quotes)
                    {
                        <tr>
                            <!-- Display the quote's ID -->
                            <td>@quote.Id</td>
                            <!-- Display the quote's text -->
                            <td>@quote.QuoteText</td>
                            <!-- Display the quote's author -->
                            <td>@quote.Author</td>
                            <!-- Button to edit the selected quote -->
                            <td>
                                <button class="btn btn-success" @onclick="() => Edit(quote)">Edit</button>
                            </td>
                            <!-- Button to delete the selected quote -->
                            <td>
                                <button class="btn btn-danger" @onclick="() => Delete(quote)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>




@code {
    private List<Quote> quotes = new();
    private EditContext editContext;
    private Quote model = new();
    private bool showForm;
    private bool showList;
    private User user;

    private async Task ToggleFavorite(int quoteId)
    {
        await QuoteProvider.ToggleFavoriteAsync(quoteId, user);
        await Refresh(); // Refresh the list of quotes after toggling
    }

    private string GetFavoriteIcon(int quoteId)
    {
        var isFavorite = favoriteQuotes.Any(fq => fq.Id == quoteId);
        return isFavorite ? Icons.Material.Filled.Favorite : Icons.Material.Outlined.FavoriteBorder;
    }

    private void ShowQuoteList()
    {
        showList = true;
    }

    private void ShowAddQuote()
    {
        model = new Quote();
        editContext = new EditContext(model);
        showForm = true;
    }

    private void Edit(Quote quote)
    {
        model = quote;
        editContext = new EditContext(model);
        showForm = true;
    }

    private async Task Submit()
    {
        if (model.Id == 0)
        {
            await QuoteProvider.AddQuoteAsync(model); // Add new quote
        }
        else
        {
            await QuoteProvider.UpdateQuoteAsync(model); // Update existing quote
        }

        await Refresh();
        showForm = false; // Hide form after submission
    }

    private async Task Refresh()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        user = UserProvider.GetUserByUsername(username);
        quotes = await QuoteProvider.GetAllQuotesAsync();
        favoriteQuotes = await QuoteProvider.GetFavoriteQuotesAsync(user);
    }

    private async Task Delete(Quote quote)
    {
        await QuoteProvider.DeleteQuoteAsync(quote);
        await Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private List<Quote> favoriteQuotes = new(); // List of favorite quotes for the user
}
