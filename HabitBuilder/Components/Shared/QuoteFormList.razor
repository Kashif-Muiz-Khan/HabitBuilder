@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject QuoteProvider QuoteProvider
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Quote List</h3>

<div>
    <div class="row g-0">
        <div class="col-md-12">
            <button class="btn btn-primary float-end" @onclick="ShowAddQuote">
                Add Quote
            </button>
        </div>
    </div>

    @if (showForm)
    {
        <div class="card">
            <div class="card-body bg-light">
                <h4 class="card-title">
                    @(model.Id == 0 ? "Add Quote" : "Edit Quote")
                </h4>
                <EditForm OnValidSubmit="Submit" EditContext="editContext">
                    <DataAnnotationsValidator />
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="quoteText" class="form-label">Quote Text</label>
                            <InputText class="form-control" placeholder="Enter the quote" @bind-Value="model.QuoteText" />
                            <ValidationMessage For="@(() => model.QuoteText)" />
                        </div>
                        <div class="col-md-6">
                            <label for="author" class="form-label">Author</label>
                            <InputText class="form-control" placeholder="Enter the author's name" @bind-Value="model.Author" />
                            <ValidationMessage For="@(() => model.Author)" />
                        </div>
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-primary float-end">
                                @(model.Id == 0 ? "Add Quote" : "Edit Quote")
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

<div class="container">
    <div class="row">
        @foreach (var quote in quotes.Select((value, index) => new { value, index }))
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@quote.value.QuoteText</h5>
                        <p class="card-text">@quote.value.Author</p>
                    </div>
                </div>
            </div>

            @if ((quote.index + 1) % 3 == 0)
            {
                <div class="row"></div>
            }
        }
    </div>
</div>

<div class="container">
    <div class="row">
        @foreach (var quote in quotes)
        {
            <div class="col-md-4 mb-4 d-flex">
                <div class="card flex-fill">
                    <!-- Displays the quote text and author, centered in the card -->
                    <div class="card-body d-flex flex-column justify-content-center align-items-center">
                        <h5 class="card-title text-center">@quote.QuoteText</h5>
                        <p class="card-text text-center">@quote.Author</p>
                        <!-- Adds a favorite button for each quote, toggling its favorite status -->
                        <MudIconButton Icon="@GetFavoriteIcon(quote.Id)"
                                       Color="Color.Secondary"
                                       aria-label="add to favorite"
                                       OnClick="@(() => ToggleFavorite(quote.Id))" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>



<div>
    <div class="row g-0">
        <div class="col-md-12">
            <button class="btn btn-primary float-end" @onclick="ShowQuoteList">
                Show Quote List
            </button>
        </div>
    </div>
    @if (showList)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Quote Text</th>
                    <th scope="col">Author</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var quote in quotes)
                {
                    <tr>
                        <td>@quote.Id</td>
                        <td>@quote.QuoteText</td>
                        <td>@quote.Author</td>
                        <td>
                            <button class="btn btn-success" @onclick="() => Edit(quote)">Edit</button>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => Delete(quote)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<Quote>? quotes;
    private EditContext editContext;
    private Quote model = new Quote();
    private bool showForm;
    private bool showList;
    private User user;


    private async Task ToggleFavorite(int quoteId)
    {
        await QuoteProvider.ToggleFavoriteAsync(quoteId, user);
        quotes = await QuoteProvider.GetAllQuotesAsync(); // Refresh quotes
        StateHasChanged();
    }

    // Depending on whether the user has added a quote as favourite or not, it adjusts the like button to be filled/ unfilled appropriately.
    private string GetFavoriteIcon(int quoteId)
    {
        var favoriteQuote = quotes.FirstOrDefault(q => q.Id == quoteId)?.FavouiteQuote;
        return favoriteQuote?.Quotes.Any(q => q.Id == quoteId) == true
            ? Icons.Material.Filled.Favorite
            : Icons.Material.Outlined.FavoriteBorder;
            StateHasChanged();
    }


    private void ShowQuoteList()
    {
        showList = true;
    }

    // Method to show the add quote form
    private void ShowAddQuote()
    {
        model = new Quote();
        editContext = new EditContext(model);
        showForm = true;
    }

    // Method to open the form for editing an existing quote
    private void Edit(Quote quote)
    {
        model = quote;
        editContext = new EditContext(model);
        showForm = true;
    }

    // Method to handle form submission
    private async Task Submit()
    {
        if (model.Id == 0)
            await QuoteProvider.AddQuoteAsync(model); // Add new quote
        else
            await QuoteProvider.UpdateQuoteAsync(model); // Update existing quote

        await Refresh();
        showForm = false; // Hide form after submission
    }

    // Method to refresh the list of quotes
    private async Task Refresh()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        user = UserProvider.GetUserByUsername(username);
        model = new Quote();
        editContext = new EditContext(model);
        quotes = await QuoteProvider.GetAllQuotesAsync();
    }

    // Method to delete a quote
    private async Task Delete(Quote quote)
    {
        await QuoteProvider.DeleteQuoteAsync(quote);
        await Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        await Refresh();
    }
}
