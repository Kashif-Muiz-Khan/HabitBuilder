@using HabitBuilder.Context
@using HabitBuilder.Model
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject QuoteProvider QuoteProvider
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Your Favorite Quotes</h3>

@if (favoriteQuotes == null) // Check if the favorite quotes are still loading
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else if (!favoriteQuotes.Any()) // Check if there are no favorite quotes
{
    <p>You haven't added any favorite quotes yet!</p>
}
else
{
    <style>
        body {
            background: #1D1F20;
            color: white;
            font-family: Arial, sans-serif;
        }

        .card.custom-card {
            background-color: rgba(26, 26, 39, 1);
            color: white;
            border: 1px solid #f1c40f;
            border-radius: 10px;
            box-shadow: 2px 2px 15px rgba(0, 0, 0, 0.5);
            height: auto; /* Allows cards to adjust height to content */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 20px;
            position: relative;
        }

        .quote-container {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .opening-quote,
        .closing-quote {
            font-size: 50px;
            color: #f1c40f;
            font-family: "Times New Roman", Georgia, Serif;
        }

        .opening-quote {
            position: absolute;
            top: 0;
            left: 10px;
        }

        .closing-quote {
            position: absolute;
            bottom: 0;
            right: 10px;
        }

        .quote-text {
            font-style: italic;
            font-size: 16px;
            color: white;
            text-align: center;
            line-height: 1.5;
            margin: 20px 40px;
            position: relative;
        }

        .card-title {
            color: #f1c40f;
            font-weight: bold;
            font-size: 18px;
            text-align: center;
            margin-top: 10px;
        }

        .actions {
            text-align: center;
            margin-top: 10px;
        }

            .actions .MudIconButton {
                margin-top: 5px;
            }
    </style>

    <div class="container">
        <div class="row">
            @foreach (var quote in favoriteQuotes)
            {
                <div class="col-md-4 mb-4">
                    <div class="card custom-card">
                        <div class="quote-container">
                            <div class="opening-quote">&ldquo;</div>
                            <div class="quote-text">@quote.QuoteText</div>
                            <div class="closing-quote">&rdquo;</div>
                        </div>
                        <h5 class="card-title">@quote.Author</h5>
                        <div class="actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           aria-label="Remove from favorites"
                                           OnClick="@(() => RemoveFavorite(quote.Id))" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {
    private List<Quote> favoriteQuotes = new(); // List to store user's favorite quotes
    private User user; // Current authenticated user

    protected override async Task OnInitializedAsync()
    {
        // Initialize and load user and their favorite quotes
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        user = UserProvider.GetUserByUsername(username);

        await LoadFavoriteQuotes(); // Fetch favorite quotes
    }

    private async Task LoadFavoriteQuotes()
    {
        // Fetch user's favorite quotes from the provider
        favoriteQuotes = await QuoteProvider.GetFavoriteQuotesAsync(user);
    }

    private async Task RemoveFavorite(int quoteId)
    {
        // Remove a quote from user's favorites
        await QuoteProvider.ToggleFavoriteAsync(quoteId, user);

        // Reload favorite quotes and refresh UI
        await LoadFavoriteQuotes();
        StateHasChanged();
    }
}
