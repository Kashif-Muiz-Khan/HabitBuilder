@using HabitBuilder.Context
@using HabitBuilder.Model
@using ApexCharts
@using Microsoft.AspNetCore.Components.Authorization
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HabitOrderProvider HabitOrderProvider




@* Draws the graph componenet with x value being the date and y value being the total points *@
<div class="card">
    <ApexChart TItem="MyData" Title="Habit Graph" Options="options">
        <ApexPointSeries TItem="MyData" Items="Data"
                         Name="Total Points"
                         SeriesType="SeriesType.Area"
                         XValue="e => e.Order"
                         YValue="e => e.Total"
                         Color="Orange"
                         />
    </ApexChart>
</div>


@code {
    private User user; // Stores the user for retrieving specific logs
    private IEnumerable<HabitOrder>? orders;
    private List<MyData> Data { get; set; } = new();
    private ApexChartOptions<MyData> options;

    protected override async Task OnInitializedAsync()
    {
        // Get user and habit orders
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
        orders = await HabitOrderProvider.GetAllOrdersAsync(user);

        CalculateTotalPoints(); // Calculate points for the graph

        // Configure chart options with Palette8
        options = new ApexChartOptions<MyData>
            {
                Theme = new Theme
                {
                    Mode = Mode.Dark, // Dark theme
                    Palette = PaletteType.Palette8 // Apply Palette8
                },
                Colors = new List<string> { "#800080" }, // Purple color

                Fill = new Fill
                {
                    Type = new List<FillType> { FillType.Solid }, // Solid fill
                    Colors = new List<string> { "#800080" } // Same purple color for the fill
                }
            };


    }

    private void CalculateTotalPoints()
    {
        // Iterate through orders and calculate total points per order
        if (orders != null)
        {
            var orderedOrder = orders.OrderBy(order => order.Day);
            foreach (var order in orderedOrder)
            {
                var totalPoints = order.Items.Sum(item => item.Habit.Point);
                Data.Add(new MyData { Order = order.Day.ToString(), Total = totalPoints });
            }
        }
    }

    // Class to represent data points for the graph
    public class MyData
    {
        public string Order { get; set; } // Order ID as X-axis
        public decimal Total { get; set; } // Total points as Y-axis
    }
}
